
ARM_AVR_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006a8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007d8  080007d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007d8  080007d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080007d8  080007d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007d8  080007d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007d8  080007d8  000107d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007dc  080007dc  000107dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080007e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  080007ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080007ec  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001033  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005ad  00000000  00000000  00021068  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b8  00000000  00000000  00021618  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000150  00000000  00000000  000217d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000010c7  00000000  00000000  00021920  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000785  00000000  00000000  000229e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004203  00000000  00000000  0002316c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002736f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000534  00000000  00000000  000273ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	080007c0 	.word	0x080007c0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	080007c0 	.word	0x080007c0

08000170 <ADC_voidInit>:
#include "ADC_interface.h"
#include "ADC_private.h"
#include "ADC_config.h"

static volatile u16 AD_val ;
void 	ADC_voidInit(void){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

#if RCC_ADC_CLKConfig == PCLK2_divided_by_2
	CLR_BIT( RCC_CFGR , 14 );
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <ADC_voidInit+0x30>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <ADC_voidInit+0x30>)
 800017a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800017e:	6013      	str	r3, [r2, #0]
	CLR_BIT( RCC_CFGR , 15 );
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <ADC_voidInit+0x30>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <ADC_voidInit+0x30>)
 8000186:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800018a:	6013      	str	r3, [r2, #0]
	SET_BIT( RCC_CFGR , 15 );
#endif

	/*  Data alignment right/left */
#if ADC_DataAlign == Right
	CLR_BIT( ADC->CR2 , 11 );
 800018c:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <ADC_voidInit+0x34>)
 800018e:	689b      	ldr	r3, [r3, #8]
 8000190:	4a04      	ldr	r2, [pc, #16]	; (80001a4 <ADC_voidInit+0x34>)
 8000192:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000196:	6093      	str	r3, [r2, #8]
#elif ADC_DataAlign == Left
	SET_BIT( ADC->CR2 , 11 );
#endif
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021004 	.word	0x40021004
 80001a4:	40012400 	.word	0x40012400

080001a8 <ADC_voidEnable>:

void    ADC_voidEnable(){
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
	SET_BIT(ADC->CR2,0);
 80001ac:	4b04      	ldr	r3, [pc, #16]	; (80001c0 <ADC_voidEnable+0x18>)
 80001ae:	689b      	ldr	r3, [r3, #8]
 80001b0:	4a03      	ldr	r2, [pc, #12]	; (80001c0 <ADC_voidEnable+0x18>)
 80001b2:	f043 0301 	orr.w	r3, r3, #1
 80001b6:	6093      	str	r3, [r2, #8]
}
 80001b8:	bf00      	nop
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	40012400 	.word	0x40012400

080001c4 <ADC_voidMode>:
void    ADC_voidDisable(){
	CLR_BIT(ADC->CR2,0);
}
/*  mode set to be continuous conversion/clear to be single conversion */
void    ADC_voidMode(){
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
	CLR_BIT(ADC->CR2,1);
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <ADC_voidMode+0x18>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4a03      	ldr	r2, [pc, #12]	; (80001dc <ADC_voidMode+0x18>)
 80001ce:	f023 0302 	bic.w	r3, r3, #2
 80001d2:	6093      	str	r3, [r2, #8]
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	40012400 	.word	0x40012400

080001e0 <ADC_voidResetCalAndCal>:
void    ADC_voidResetCalAndCal(){
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0
	SET_BIT(ADC->CR2,3);
 80001e4:	4b12      	ldr	r3, [pc, #72]	; (8000230 <ADC_voidResetCalAndCal+0x50>)
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	4a11      	ldr	r2, [pc, #68]	; (8000230 <ADC_voidResetCalAndCal+0x50>)
 80001ea:	f043 0308 	orr.w	r3, r3, #8
 80001ee:	6093      	str	r3, [r2, #8]
	while(GET_BIT(ADC->CR2,3));
 80001f0:	bf00      	nop
 80001f2:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <ADC_voidResetCalAndCal+0x50>)
 80001f4:	689b      	ldr	r3, [r3, #8]
 80001f6:	08db      	lsrs	r3, r3, #3
 80001f8:	f003 0301 	and.w	r3, r3, #1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d1f8      	bne.n	80001f2 <ADC_voidResetCalAndCal+0x12>
	
	SET_BIT(ADC->CR2,2);
 8000200:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <ADC_voidResetCalAndCal+0x50>)
 8000202:	689b      	ldr	r3, [r3, #8]
 8000204:	4a0a      	ldr	r2, [pc, #40]	; (8000230 <ADC_voidResetCalAndCal+0x50>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6093      	str	r3, [r2, #8]
	
	while(GET_BIT(ADC->CR2,2));
 800020c:	bf00      	nop
 800020e:	4b08      	ldr	r3, [pc, #32]	; (8000230 <ADC_voidResetCalAndCal+0x50>)
 8000210:	689b      	ldr	r3, [r3, #8]
 8000212:	089b      	lsrs	r3, r3, #2
 8000214:	f003 0301 	and.w	r3, r3, #1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d1f8      	bne.n	800020e <ADC_voidResetCalAndCal+0x2e>

	SET_BIT(ADC->CR2,0);  // start conversion
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <ADC_voidResetCalAndCal+0x50>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	4a03      	ldr	r2, [pc, #12]	; (8000230 <ADC_voidResetCalAndCal+0x50>)
 8000222:	f043 0301 	orr.w	r3, r3, #1
 8000226:	6093      	str	r3, [r2, #8]
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	40012400 	.word	0x40012400

08000234 <Adc_voidReadADC>:

u16	Adc_voidReadADC(channel_t Channel,u8 Copy_u8SampleTime_Cycles){
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	460a      	mov	r2, r1
 800023e:	71fb      	strb	r3, [r7, #7]
 8000240:	4613      	mov	r3, r2
 8000242:	71bb      	strb	r3, [r7, #6]
	
	ADC->SQR1 = 0x00000000;  // Regular channel single conversion
 8000244:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <Adc_voidReadADC+0x8c>)
 8000246:	2200      	movs	r2, #0
 8000248:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC->SQR2 = 0x00000000; // Clear register
 800024a:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <Adc_voidReadADC+0x8c>)
 800024c:	2200      	movs	r2, #0
 800024e:	631a      	str	r2, [r3, #48]	; 0x30
	ADC->SQR3 = (Channel<<0);  // channel seq as 1st conversion
 8000250:	4a1b      	ldr	r2, [pc, #108]	; (80002c0 <Adc_voidReadADC+0x8c>)
 8000252:	79fb      	ldrb	r3, [r7, #7]
 8000254:	6353      	str	r3, [r2, #52]	; 0x34

	/*	To deal with Bit Masking 1- Clear a specific Bits 2- Assign a specific Bits	*/
	ADC->SMPR2 &= ~((u32)(0b111)<<(Channel * 3));
 8000256:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <Adc_voidReadADC+0x8c>)
 8000258:	6919      	ldr	r1, [r3, #16]
 800025a:	79fa      	ldrb	r2, [r7, #7]
 800025c:	4613      	mov	r3, r2
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	4413      	add	r3, r2
 8000262:	2207      	movs	r2, #7
 8000264:	fa02 f303 	lsl.w	r3, r2, r3
 8000268:	43db      	mvns	r3, r3
 800026a:	4a15      	ldr	r2, [pc, #84]	; (80002c0 <Adc_voidReadADC+0x8c>)
 800026c:	400b      	ands	r3, r1
 800026e:	6113      	str	r3, [r2, #16]
	ADC->SMPR2 |=  ((u32)(Copy_u8SampleTime_Cycles)<<(Channel * 3));
 8000270:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <Adc_voidReadADC+0x8c>)
 8000272:	6919      	ldr	r1, [r3, #16]
 8000274:	79b8      	ldrb	r0, [r7, #6]
 8000276:	79fa      	ldrb	r2, [r7, #7]
 8000278:	4613      	mov	r3, r2
 800027a:	005b      	lsls	r3, r3, #1
 800027c:	4413      	add	r3, r2
 800027e:	fa00 f303 	lsl.w	r3, r0, r3
 8000282:	4a0f      	ldr	r2, [pc, #60]	; (80002c0 <Adc_voidReadADC+0x8c>)
 8000284:	430b      	orrs	r3, r1
 8000286:	6113      	str	r3, [r2, #16]

	if (ADC->SR & (1 << 1)) { // If conversion has finished (Check EOC bit)
 8000288:	4b0d      	ldr	r3, [pc, #52]	; (80002c0 <Adc_voidReadADC+0x8c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f003 0302 	and.w	r3, r3, #2
 8000290:	2b00      	cmp	r3, #0
 8000292:	d00d      	beq.n	80002b0 <Adc_voidReadADC+0x7c>
		AD_val = ADC->DR & 0x0FFF; // Read AD converted value
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <Adc_voidReadADC+0x8c>)
 8000296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000298:	b29b      	uxth	r3, r3
 800029a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800029e:	b29a      	uxth	r2, r3
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <Adc_voidReadADC+0x90>)
 80002a2:	801a      	strh	r2, [r3, #0]

		SET_BIT(ADC->CR2,0); // Start new conversion
 80002a4:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <Adc_voidReadADC+0x8c>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a05      	ldr	r2, [pc, #20]	; (80002c0 <Adc_voidReadADC+0x8c>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6093      	str	r3, [r2, #8]
	}
	return AD_val;
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <Adc_voidReadADC+0x90>)
 80002b2:	881b      	ldrh	r3, [r3, #0]
 80002b4:	b29b      	uxth	r3, r3
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr
 80002c0:	40012400 	.word	0x40012400
 80002c4:	20000028 	.word	0x20000028

080002c8 <GPIO_VidSetPinDirection>:
#include "GPIO_private.h"
#include "GPIO_config.h"

volatile GPIO *Global_ArrPtrStr_GPIOX[3]={ GPIOA_ADDRESS , GPIOB_ADDRESS , GPIOC_ADDRESS };

u8 	GPIO_VidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Mode ){
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
 80002d2:	460b      	mov	r3, r1
 80002d4:	71bb      	strb	r3, [r7, #6]
 80002d6:	4613      	mov	r3, r2
 80002d8:	717b      	strb	r3, [r7, #5]

	u8 Local_u8ErroreState = STD_TYPES_OK;
 80002da:	2301      	movs	r3, #1
 80002dc:	73fb      	strb	r3, [r7, #15]

	if(Copy_u8Pin <= PIN7 && Copy_u8Port <= GPIOC ){//low
 80002de:	79bb      	ldrb	r3, [r7, #6]
 80002e0:	2b07      	cmp	r3, #7
 80002e2:	d826      	bhi.n	8000332 <GPIO_VidSetPinDirection+0x6a>
 80002e4:	79fb      	ldrb	r3, [r7, #7]
 80002e6:	2b02      	cmp	r3, #2
 80002e8:	d823      	bhi.n	8000332 <GPIO_VidSetPinDirection+0x6a>

		Global_ArrPtrStr_GPIOX[Copy_u8Port]->CRL &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	4a33      	ldr	r2, [pc, #204]	; (80003bc <GPIO_VidSetPinDirection+0xf4>)
 80002ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002f2:	681a      	ldr	r2, [r3, #0]
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	210f      	movs	r1, #15
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	43db      	mvns	r3, r3
 8000300:	4618      	mov	r0, r3
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	492d      	ldr	r1, [pc, #180]	; (80003bc <GPIO_VidSetPinDirection+0xf4>)
 8000306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800030a:	4002      	ands	r2, r0
 800030c:	601a      	str	r2, [r3, #0]
		Global_ArrPtrStr_GPIOX[Copy_u8Port]->CRL |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	4a2a      	ldr	r2, [pc, #168]	; (80003bc <GPIO_VidSetPinDirection+0xf4>)
 8000312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000316:	681a      	ldr	r2, [r3, #0]
 8000318:	7979      	ldrb	r1, [r7, #5]
 800031a:	79bb      	ldrb	r3, [r7, #6]
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	fa01 f303 	lsl.w	r3, r1, r3
 8000322:	4618      	mov	r0, r3
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	4925      	ldr	r1, [pc, #148]	; (80003bc <GPIO_VidSetPinDirection+0xf4>)
 8000328:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800032c:	4302      	orrs	r2, r0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	e02b      	b.n	800038a <GPIO_VidSetPinDirection+0xc2>
	}
	else if(Copy_u8Pin <= PIN15 && Copy_u8Port <= GPIOC ){//high
 8000332:	79bb      	ldrb	r3, [r7, #6]
 8000334:	2b0f      	cmp	r3, #15
 8000336:	d826      	bhi.n	8000386 <GPIO_VidSetPinDirection+0xbe>
 8000338:	79fb      	ldrb	r3, [r7, #7]
 800033a:	2b02      	cmp	r3, #2
 800033c:	d823      	bhi.n	8000386 <GPIO_VidSetPinDirection+0xbe>

		Global_ArrPtrStr_GPIOX[Copy_u8Port]->CRH &= ~ ( ( 0b1111 )    << ( Copy_u8Pin * 4 ));
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	4a1e      	ldr	r2, [pc, #120]	; (80003bc <GPIO_VidSetPinDirection+0xf4>)
 8000342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000346:	685a      	ldr	r2, [r3, #4]
 8000348:	79bb      	ldrb	r3, [r7, #6]
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	210f      	movs	r1, #15
 800034e:	fa01 f303 	lsl.w	r3, r1, r3
 8000352:	43db      	mvns	r3, r3
 8000354:	4618      	mov	r0, r3
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	4918      	ldr	r1, [pc, #96]	; (80003bc <GPIO_VidSetPinDirection+0xf4>)
 800035a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800035e:	4002      	ands	r2, r0
 8000360:	605a      	str	r2, [r3, #4]
		Global_ArrPtrStr_GPIOX[Copy_u8Port]->CRH |= ( u8Copy_u8Mode ) << ( Copy_u8Pin * 4 );
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	4a15      	ldr	r2, [pc, #84]	; (80003bc <GPIO_VidSetPinDirection+0xf4>)
 8000366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800036a:	685a      	ldr	r2, [r3, #4]
 800036c:	7979      	ldrb	r1, [r7, #5]
 800036e:	79bb      	ldrb	r3, [r7, #6]
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	4618      	mov	r0, r3
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	4910      	ldr	r1, [pc, #64]	; (80003bc <GPIO_VidSetPinDirection+0xf4>)
 800037c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000380:	4302      	orrs	r2, r0
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	e001      	b.n	800038a <GPIO_VidSetPinDirection+0xc2>
	}
	else{
		Local_u8ErroreState = STD_TYPES_NOK;
 8000386:	2300      	movs	r3, #0
 8000388:	73fb      	strb	r3, [r7, #15]
	}
	if(u8Copy_u8Mode == INPUT_PULLUP_PULLDOWN){
 800038a:	797b      	ldrb	r3, [r7, #5]
 800038c:	2b08      	cmp	r3, #8
 800038e:	d10f      	bne.n	80003b0 <GPIO_VidSetPinDirection+0xe8>
		SET_BIT(Global_ArrPtrStr_GPIOX[Copy_u8Port]->ODR , Copy_u8Pin);
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <GPIO_VidSetPinDirection+0xf4>)
 8000394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000398:	68da      	ldr	r2, [r3, #12]
 800039a:	79bb      	ldrb	r3, [r7, #6]
 800039c:	2101      	movs	r1, #1
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
 80003a2:	4618      	mov	r0, r3
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	4905      	ldr	r1, [pc, #20]	; (80003bc <GPIO_VidSetPinDirection+0xf4>)
 80003a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003ac:	4302      	orrs	r2, r0
 80003ae:	60da      	str	r2, [r3, #12]
	}
	/*else if(u8Copy_u8Mode == INPUT_PULLUP_PULLDOWN){
		SET_BIT(Global_ArrPtrStr_GPIOX[Copy_u8Port]->ODR , Copy_u8Pin);
	}*/
	return Local_u8ErroreState;
 80003b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3714      	adds	r7, #20
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	20000000 	.word	0x20000000

080003c0 <GPIO_VidSetPinValue>:

u8 	GPIO_VidSetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8 u8Copy_u8Value ){
 80003c0:	b480      	push	{r7}
 80003c2:	b085      	sub	sp, #20
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
 80003ca:	460b      	mov	r3, r1
 80003cc:	71bb      	strb	r3, [r7, #6]
 80003ce:	4613      	mov	r3, r2
 80003d0:	717b      	strb	r3, [r7, #5]

	u8 Local_u8ErroreState = STD_TYPES_OK;
 80003d2:	2301      	movs	r3, #1
 80003d4:	73fb      	strb	r3, [r7, #15]

	if(Copy_u8Pin <= PIN15 && Copy_u8Port <= GPIOC && u8Copy_u8Value == HIGH ){//high
 80003d6:	79bb      	ldrb	r3, [r7, #6]
 80003d8:	2b0f      	cmp	r3, #15
 80003da:	d810      	bhi.n	80003fe <GPIO_VidSetPinValue+0x3e>
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	2b02      	cmp	r3, #2
 80003e0:	d80d      	bhi.n	80003fe <GPIO_VidSetPinValue+0x3e>
 80003e2:	797b      	ldrb	r3, [r7, #5]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d10a      	bne.n	80003fe <GPIO_VidSetPinValue+0x3e>

		Global_ArrPtrStr_GPIOX[Copy_u8Port]->BSRR = (1 << Copy_u8Pin );
 80003e8:	79bb      	ldrb	r3, [r7, #6]
 80003ea:	2201      	movs	r2, #1
 80003ec:	fa02 f103 	lsl.w	r1, r2, r3
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	4a11      	ldr	r2, [pc, #68]	; (8000438 <GPIO_VidSetPinValue+0x78>)
 80003f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003f8:	460a      	mov	r2, r1
 80003fa:	611a      	str	r2, [r3, #16]
 80003fc:	e015      	b.n	800042a <GPIO_VidSetPinValue+0x6a>
	}
	else if(Copy_u8Pin <= PIN15 && Copy_u8Port <= GPIOC && u8Copy_u8Value == LOW ){//low
 80003fe:	79bb      	ldrb	r3, [r7, #6]
 8000400:	2b0f      	cmp	r3, #15
 8000402:	d810      	bhi.n	8000426 <GPIO_VidSetPinValue+0x66>
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	2b02      	cmp	r3, #2
 8000408:	d80d      	bhi.n	8000426 <GPIO_VidSetPinValue+0x66>
 800040a:	797b      	ldrb	r3, [r7, #5]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d10a      	bne.n	8000426 <GPIO_VidSetPinValue+0x66>

		Global_ArrPtrStr_GPIOX[Copy_u8Port]->BRR = (1 << Copy_u8Pin );
 8000410:	79bb      	ldrb	r3, [r7, #6]
 8000412:	2201      	movs	r2, #1
 8000414:	fa02 f103 	lsl.w	r1, r2, r3
 8000418:	79fb      	ldrb	r3, [r7, #7]
 800041a:	4a07      	ldr	r2, [pc, #28]	; (8000438 <GPIO_VidSetPinValue+0x78>)
 800041c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000420:	460a      	mov	r2, r1
 8000422:	615a      	str	r2, [r3, #20]
 8000424:	e001      	b.n	800042a <GPIO_VidSetPinValue+0x6a>
	}
	else{
		Local_u8ErroreState = STD_TYPES_NOK;
 8000426:	2300      	movs	r3, #0
 8000428:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErroreState;
 800042a:	7bfb      	ldrb	r3, [r7, #15]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3714      	adds	r7, #20
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000000 	.word	0x20000000

0800043c <MNVIC_u8EnablePeripheral>:

#include "NVIC_interface.h"
#include "NVIC_private.h"
#include "NVIC_config.h"

u8 MNVIC_u8EnablePeripheral ( u8 Copy_u8INTID ){
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	71fb      	strb	r3, [r7, #7]

	u8 Local_u8ErroreState = STD_TYPES_NOK;
 8000446:	2300      	movs	r3, #0
 8000448:	73fb      	strb	r3, [r7, #15]

	if(Copy_u8INTID <= DMA2_Channel4_5 ){
 800044a:	79fb      	ldrb	r3, [r7, #7]
 800044c:	2b3b      	cmp	r3, #59	; 0x3b
 800044e:	d80d      	bhi.n	800046c <MNVIC_u8EnablePeripheral+0x30>
		/*
		 * Copy_u8INTID / 32 -> Refer to Register Number For the Target IRQ
		 * Copy_u8INTID % 32 -> Refer to Bit Number For the Target IRQ in the Register
		 *
		 * */
		MNVIC->ISER[ Copy_u8INTID / 32 ] = 1 << ( Copy_u8INTID % 32 );
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	f003 031f 	and.w	r3, r3, #31
 8000456:	2201      	movs	r2, #1
 8000458:	fa02 f103 	lsl.w	r1, r2, r3
 800045c:	4a06      	ldr	r2, [pc, #24]	; (8000478 <MNVIC_u8EnablePeripheral+0x3c>)
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	095b      	lsrs	r3, r3, #5
 8000462:	b2db      	uxtb	r3, r3
 8000464:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		Local_u8ErroreState = STD_TYPES_OK;
 8000468:	2301      	movs	r3, #1
 800046a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErroreState;
 800046c:	7bfb      	ldrb	r3, [r7, #15]
}
 800046e:	4618      	mov	r0, r3
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	e000e100 	.word	0xe000e100

0800047c <RCC_VidInit>:

#include "RCC_interface.h"
#include "RCC_private.h"
#include "RCC_config.h"

void RCC_VidInit( void ){
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

	#elif CLOCK_TYPE == HSE

		/* BIT 1:0 -> Choose Between HSI OR HSE OR PLL */
		/* HSE Selected As A System Clock */
		SET_BIT( RCC->CFGR , 0  );
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <RCC_VidInit+0x4c>)
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	4a10      	ldr	r2, [pc, #64]	; (80004c8 <RCC_VidInit+0x4c>)
 8000486:	f043 0301 	orr.w	r3, r3, #1
 800048a:	6053      	str	r3, [r2, #4]
		CLR_BIT( RCC->CFGR , 1  );
 800048c:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <RCC_VidInit+0x4c>)
 800048e:	685b      	ldr	r3, [r3, #4]
 8000490:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <RCC_VidInit+0x4c>)
 8000492:	f023 0302 	bic.w	r3, r3, #2
 8000496:	6053      	str	r3, [r2, #4]
		/* Bit 16 -> Enable The HSE Clock */
		SET_BIT( RCC->CR   , 16 );
 8000498:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <RCC_VidInit+0x4c>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <RCC_VidInit+0x4c>)
 800049e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80004a2:	6013      	str	r3, [r2, #0]
		/* Bit 17 -> Checking While The HSE Clock Is Stable */
		while((( GET_BIT( RCC->CR , 17 )) == 0 )){
 80004a4:	bf00      	nop
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <RCC_VidInit+0x4c>)
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	0c5b      	lsrs	r3, r3, #17
 80004ac:	f003 0301 	and.w	r3, r3, #1
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d0f8      	beq.n	80004a6 <RCC_VidInit+0x2a>

		SET_BIT( RCC->CR , 19 );

	#elif CLOCK_SECURITY_SYSTEM == DISABLE_CLOCK_SECURITY_SYSTEM

		CLR_BIT( RCC->CR , 19 );
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <RCC_VidInit+0x4c>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a03      	ldr	r2, [pc, #12]	; (80004c8 <RCC_VidInit+0x4c>)
 80004ba:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80004be:	6013      	str	r3, [r2, #0]

		#warning " Wrong Clock Security System Configuration Choice "

	#endif

}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000

080004cc <RCC_VidEnablePeripheralClock>:

void RCC_VidEnablePeripheralClock( u8 Copy_u8PeripheralBus , u8 Copy_u8Peripheral ){
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	460a      	mov	r2, r1
 80004d6:	71fb      	strb	r3, [r7, #7]
 80004d8:	4613      	mov	r3, r2
 80004da:	71bb      	strb	r3, [r7, #6]


		switch( Copy_u8PeripheralBus ){
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d00f      	beq.n	8000502 <RCC_VidEnablePeripheralClock+0x36>
 80004e2:	2b02      	cmp	r3, #2
 80004e4:	d018      	beq.n	8000518 <RCC_VidEnablePeripheralClock+0x4c>
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d000      	beq.n	80004ec <RCC_VidEnablePeripheralClock+0x20>
			case APB1_BUS :	SET_BIT( RCC->APB1ENR , Copy_u8Peripheral ); break;
			case APB2_BUS : SET_BIT( RCC->APB2ENR , Copy_u8Peripheral ); break;

		}

}
 80004ea:	e020      	b.n	800052e <RCC_VidEnablePeripheralClock+0x62>
			case AHB_BUS  : SET_BIT( RCC->AHBENR  , Copy_u8Peripheral ); break;
 80004ec:	4b12      	ldr	r3, [pc, #72]	; (8000538 <RCC_VidEnablePeripheralClock+0x6c>)
 80004ee:	695b      	ldr	r3, [r3, #20]
 80004f0:	79ba      	ldrb	r2, [r7, #6]
 80004f2:	2101      	movs	r1, #1
 80004f4:	fa01 f202 	lsl.w	r2, r1, r2
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a0f      	ldr	r2, [pc, #60]	; (8000538 <RCC_VidEnablePeripheralClock+0x6c>)
 80004fc:	430b      	orrs	r3, r1
 80004fe:	6153      	str	r3, [r2, #20]
 8000500:	e015      	b.n	800052e <RCC_VidEnablePeripheralClock+0x62>
			case APB1_BUS :	SET_BIT( RCC->APB1ENR , Copy_u8Peripheral ); break;
 8000502:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <RCC_VidEnablePeripheralClock+0x6c>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	79ba      	ldrb	r2, [r7, #6]
 8000508:	2101      	movs	r1, #1
 800050a:	fa01 f202 	lsl.w	r2, r1, r2
 800050e:	4611      	mov	r1, r2
 8000510:	4a09      	ldr	r2, [pc, #36]	; (8000538 <RCC_VidEnablePeripheralClock+0x6c>)
 8000512:	430b      	orrs	r3, r1
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	e00a      	b.n	800052e <RCC_VidEnablePeripheralClock+0x62>
			case APB2_BUS : SET_BIT( RCC->APB2ENR , Copy_u8Peripheral ); break;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <RCC_VidEnablePeripheralClock+0x6c>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	79ba      	ldrb	r2, [r7, #6]
 800051e:	2101      	movs	r1, #1
 8000520:	fa01 f202 	lsl.w	r2, r1, r2
 8000524:	4611      	mov	r1, r2
 8000526:	4a04      	ldr	r2, [pc, #16]	; (8000538 <RCC_VidEnablePeripheralClock+0x6c>)
 8000528:	430b      	orrs	r3, r1
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	bf00      	nop
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40021000 	.word	0x40021000

0800053c <MUSART2_voidInit>:
}



void MUSART2_voidInit(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
/*	baud rate = 9600		*/
	USART2 -> BRR = 0x341;
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <MUSART2_voidInit+0x88>)
 8000542:	f240 3241 	movw	r2, #833	; 0x341
 8000546:	609a      	str	r2, [r3, #8]

	USART2 -> SR = 0;						/* Clearing status register */
 8000548:	4b1e      	ldr	r3, [pc, #120]	; (80005c4 <MUSART2_voidInit+0x88>)
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]

	SET_BIT((USART2-> CR[0]), 5); /* Enable RX Interrupt*/
 800054e:	4b1d      	ldr	r3, [pc, #116]	; (80005c4 <MUSART2_voidInit+0x88>)
 8000550:	68db      	ldr	r3, [r3, #12]
 8000552:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <MUSART2_voidInit+0x88>)
 8000554:	f043 0320 	orr.w	r3, r3, #32
 8000558:	60d3      	str	r3, [r2, #12]
	CLR_BIT((USART2-> CR[0]), 6);
 800055a:	4b1a      	ldr	r3, [pc, #104]	; (80005c4 <MUSART2_voidInit+0x88>)
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	4a19      	ldr	r2, [pc, #100]	; (80005c4 <MUSART2_voidInit+0x88>)
 8000560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000564:	60d3      	str	r3, [r2, #12]
	CLR_BIT((USART2-> CR[0]), 7);
 8000566:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <MUSART2_voidInit+0x88>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <MUSART2_voidInit+0x88>)
 800056c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000570:	60d3      	str	r3, [r2, #12]
	CLR_BIT((USART2-> CR[0]), 10);
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <MUSART2_voidInit+0x88>)
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	4a13      	ldr	r2, [pc, #76]	; (80005c4 <MUSART2_voidInit+0x88>)
 8000578:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800057c:	60d3      	str	r3, [r2, #12]

	CLR_BIT((USART2-> CR[1]), 12);
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MUSART2_voidInit+0x88>)
 8000580:	691b      	ldr	r3, [r3, #16]
 8000582:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <MUSART2_voidInit+0x88>)
 8000584:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000588:	6113      	str	r3, [r2, #16]
	CLR_BIT((USART2-> CR[1]), 13);
 800058a:	4b0e      	ldr	r3, [pc, #56]	; (80005c4 <MUSART2_voidInit+0x88>)
 800058c:	691b      	ldr	r3, [r3, #16]
 800058e:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <MUSART2_voidInit+0x88>)
 8000590:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000594:	6113      	str	r3, [r2, #16]

	SET_BIT((USART2-> CR[0]), 3);			/* Enabling Transmitter */
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <MUSART2_voidInit+0x88>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	4a0a      	ldr	r2, [pc, #40]	; (80005c4 <MUSART2_voidInit+0x88>)
 800059c:	f043 0308 	orr.w	r3, r3, #8
 80005a0:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART2-> CR[0]), 2);			/* Enabling Receiver */
 80005a2:	4b08      	ldr	r3, [pc, #32]	; (80005c4 <MUSART2_voidInit+0x88>)
 80005a4:	68db      	ldr	r3, [r3, #12]
 80005a6:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <MUSART2_voidInit+0x88>)
 80005a8:	f043 0304 	orr.w	r3, r3, #4
 80005ac:	60d3      	str	r3, [r2, #12]
	SET_BIT((USART2-> CR[0]), 13);			/* Enabling USART */
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <MUSART2_voidInit+0x88>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <MUSART2_voidInit+0x88>)
 80005b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005b8:	60d3      	str	r3, [r2, #12]

}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40004400 	.word	0x40004400

080005c8 <MUSART2_voidTransmit>:

void MUSART2_voidTransmit(u8 data){
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]

	volatile u16 Local_Time_Out = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	81fb      	strh	r3, [r7, #14]
	USART2 -> DR = data;
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <MUSART2_voidTransmit+0x48>)
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	6053      	str	r3, [r2, #4]
	while((GET_BIT((USART2 -> SR), 6)) == 0 && ++Local_Time_Out < 100000);
 80005dc:	bf00      	nop
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MUSART2_voidTransmit+0x48>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	099b      	lsrs	r3, r3, #6
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d105      	bne.n	80005f8 <MUSART2_voidTransmit+0x30>
 80005ec:	89fb      	ldrh	r3, [r7, #14]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	3301      	adds	r3, #1
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	81fb      	strh	r3, [r7, #14]
 80005f6:	e7f2      	b.n	80005de <MUSART2_voidTransmit+0x16>
	CLR_BIT(USART2 -> SR , 6);
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <MUSART2_voidTransmit+0x48>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <MUSART2_voidTransmit+0x48>)
 80005fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000602:	6013      	str	r3, [r2, #0]

}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	40004400 	.word	0x40004400

08000614 <MUSART2_VidSetCallBack>:
	return (Loc_u8ReceivedData);
}



void MUSART2_VidSetCallBack( void (*ptr) (u8 Resive) ){
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

	MUSART2_CallBack = ptr ;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <MUSART2_VidSetCallBack+0x18>)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6013      	str	r3, [r2, #0]

}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	2000002c 	.word	0x2000002c

08000630 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0


	USART2 -> SR = 0 ;
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <USART2_IRQHandler+0x1c>)
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
	MUSART2_CallBack(USART2 -> DR);
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <USART2_IRQHandler+0x20>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a03      	ldr	r2, [pc, #12]	; (800064c <USART2_IRQHandler+0x1c>)
 8000640:	6852      	ldr	r2, [r2, #4]
 8000642:	b2d2      	uxtb	r2, r2
 8000644:	4610      	mov	r0, r2
 8000646:	4798      	blx	r3

}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40004400 	.word	0x40004400
 8000650:	2000002c 	.word	0x2000002c

08000654 <main>:
#include "USART_Interface.h"

void CallBack_USART2(u8 Resive);

int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0

	RCC_VidInit();
 800065a:	f7ff ff0f 	bl	800047c <RCC_VidInit>

	RCC_VidEnablePeripheralClock(APB2_BUS, GPIOA_RCC);
 800065e:	2102      	movs	r1, #2
 8000660:	2002      	movs	r0, #2
 8000662:	f7ff ff33 	bl	80004cc <RCC_VidEnablePeripheralClock>
	RCC_VidEnablePeripheralClock(APB2_BUS, ADC1_RCC);
 8000666:	2109      	movs	r1, #9
 8000668:	2002      	movs	r0, #2
 800066a:	f7ff ff2f 	bl	80004cc <RCC_VidEnablePeripheralClock>

	RCC_VidEnablePeripheralClock(APB1_BUS, USART2_RCC);
 800066e:	2111      	movs	r1, #17
 8000670:	2001      	movs	r0, #1
 8000672:	f7ff ff2b 	bl	80004cc <RCC_VidEnablePeripheralClock>

	MNVIC_u8EnablePeripheral(USART2);
 8000676:	2026      	movs	r0, #38	; 0x26
 8000678:	f7ff fee0 	bl	800043c <MNVIC_u8EnablePeripheral>

	/* ADC FOR TEMP Sensor */
	GPIO_VidSetPinDirection(GPIOA ,  PIN0, INPUT_ANLOG);
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	2000      	movs	r0, #0
 8000682:	f7ff fe21 	bl	80002c8 <GPIO_VidSetPinDirection>

	/*LED Control Through BL */
	GPIO_VidSetPinDirection(GPIOA ,  PIN7, OUTPUT_SPEED_2MHZ_PP);
 8000686:	2202      	movs	r2, #2
 8000688:	2107      	movs	r1, #7
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff fe1c 	bl	80002c8 <GPIO_VidSetPinDirection>

	/* UART2 */
	/* TX1*/
	GPIO_VidSetPinDirection(GPIOA ,  PIN2, OUTPUT_SPEED_10MHZ_AFPP);
 8000690:	2209      	movs	r2, #9
 8000692:	2102      	movs	r1, #2
 8000694:	2000      	movs	r0, #0
 8000696:	f7ff fe17 	bl	80002c8 <GPIO_VidSetPinDirection>
	/* UART2 */
	/* RX2*/
	GPIO_VidSetPinDirection(GPIOA ,  PIN3, INPUT_FLOATING);
 800069a:	2204      	movs	r2, #4
 800069c:	2103      	movs	r1, #3
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff fe12 	bl	80002c8 <GPIO_VidSetPinDirection>

	ADC_voidInit();
 80006a4:	f7ff fd64 	bl	8000170 <ADC_voidInit>
	ADC_voidEnable();
 80006a8:	f7ff fd7e 	bl	80001a8 <ADC_voidEnable>
	ADC_voidMode();
 80006ac:	f7ff fd8a 	bl	80001c4 <ADC_voidMode>
	ADC_voidResetCalAndCal();
 80006b0:	f7ff fd96 	bl	80001e0 <ADC_voidResetCalAndCal>

	//MUSART1_voidInit();
	MUSART2_voidInit();
 80006b4:	f7ff ff42 	bl	800053c <MUSART2_voidInit>
	u16 TEMP=0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	80fb      	strh	r3, [r7, #6]

	MUSART2_VidSetCallBack(CallBack_USART2);
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <main+0x9c>)
 80006be:	f7ff ffa9 	bl	8000614 <MUSART2_VidSetCallBack>

	/* Loop forever */
	while(1){

		TEMP = Adc_voidReadADC(CH0,ADC_SampleTime_Cycles_5);
 80006c2:	2104      	movs	r1, #4
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff fdb5 	bl	8000234 <Adc_voidReadADC>
 80006ca:	4603      	mov	r3, r0
 80006cc:	80fb      	strh	r3, [r7, #6]
		TEMP = (TEMP* 330) / 4096 ;
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80006d4:	fb02 f303 	mul.w	r3, r2, r3
 80006d8:	2b00      	cmp	r3, #0
 80006da:	da01      	bge.n	80006e0 <main+0x8c>
 80006dc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80006e0:	131b      	asrs	r3, r3, #12
 80006e2:	80fb      	strh	r3, [r7, #6]

		MUSART2_voidTransmit(TEMP);
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff6d 	bl	80005c8 <MUSART2_voidTransmit>
		TEMP = Adc_voidReadADC(CH0,ADC_SampleTime_Cycles_5);
 80006ee:	e7e8      	b.n	80006c2 <main+0x6e>
 80006f0:	080006f5 	.word	0x080006f5

080006f4 <CallBack_USART2>:

	}
	return 0;
}

void CallBack_USART2(u8 Resive){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]

	if(Resive == '1'){
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	2b31      	cmp	r3, #49	; 0x31
 8000702:	d105      	bne.n	8000710 <CallBack_USART2+0x1c>

		GPIO_VidSetPinValue(GPIOA, PIN7, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	2107      	movs	r1, #7
 8000708:	2000      	movs	r0, #0
 800070a:	f7ff fe59 	bl	80003c0 <GPIO_VidSetPinValue>
	}
	else{
		GPIO_VidSetPinValue(GPIOA, PIN7, 0);
	}
}
 800070e:	e004      	b.n	800071a <CallBack_USART2+0x26>
		GPIO_VidSetPinValue(GPIOA, PIN7, 0);
 8000710:	2200      	movs	r2, #0
 8000712:	2107      	movs	r1, #7
 8000714:	2000      	movs	r0, #0
 8000716:	f7ff fe53 	bl	80003c0 <GPIO_VidSetPinValue>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000726:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000728:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <LoopForever+0x6>)
  ldr r1, =_edata
 800072e:	490d      	ldr	r1, [pc, #52]	; (8000764 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000730:	4a0d      	ldr	r2, [pc, #52]	; (8000768 <LoopForever+0xe>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000734:	e002      	b.n	800073c <LoopCopyDataInit>

08000736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073a:	3304      	adds	r3, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800073c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000740:	d3f9      	bcc.n	8000736 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000744:	4c0a      	ldr	r4, [pc, #40]	; (8000770 <LoopForever+0x16>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000748:	e001      	b.n	800074e <LoopFillZerobss>

0800074a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800074c:	3204      	adds	r2, #4

0800074e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000750:	d3fb      	bcc.n	800074a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000752:	f000 f811 	bl	8000778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000756:	f7ff ff7d 	bl	8000654 <main>

0800075a <LoopForever>:

LoopForever:
    b LoopForever
 800075a:	e7fe      	b.n	800075a <LoopForever>
  ldr   r0, =_estack
 800075c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000768:	080007e0 	.word	0x080007e0
  ldr r2, =_sbss
 800076c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000770:	20000030 	.word	0x20000030

08000774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC1_2_IRQHandler>
	...

08000778 <__libc_init_array>:
 8000778:	b570      	push	{r4, r5, r6, lr}
 800077a:	2500      	movs	r5, #0
 800077c:	4e0c      	ldr	r6, [pc, #48]	; (80007b0 <__libc_init_array+0x38>)
 800077e:	4c0d      	ldr	r4, [pc, #52]	; (80007b4 <__libc_init_array+0x3c>)
 8000780:	1ba4      	subs	r4, r4, r6
 8000782:	10a4      	asrs	r4, r4, #2
 8000784:	42a5      	cmp	r5, r4
 8000786:	d109      	bne.n	800079c <__libc_init_array+0x24>
 8000788:	f000 f81a 	bl	80007c0 <_init>
 800078c:	2500      	movs	r5, #0
 800078e:	4e0a      	ldr	r6, [pc, #40]	; (80007b8 <__libc_init_array+0x40>)
 8000790:	4c0a      	ldr	r4, [pc, #40]	; (80007bc <__libc_init_array+0x44>)
 8000792:	1ba4      	subs	r4, r4, r6
 8000794:	10a4      	asrs	r4, r4, #2
 8000796:	42a5      	cmp	r5, r4
 8000798:	d105      	bne.n	80007a6 <__libc_init_array+0x2e>
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007a0:	4798      	blx	r3
 80007a2:	3501      	adds	r5, #1
 80007a4:	e7ee      	b.n	8000784 <__libc_init_array+0xc>
 80007a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007aa:	4798      	blx	r3
 80007ac:	3501      	adds	r5, #1
 80007ae:	e7f2      	b.n	8000796 <__libc_init_array+0x1e>
 80007b0:	080007d8 	.word	0x080007d8
 80007b4:	080007d8 	.word	0x080007d8
 80007b8:	080007d8 	.word	0x080007d8
 80007bc:	080007dc 	.word	0x080007dc

080007c0 <_init>:
 80007c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c2:	bf00      	nop
 80007c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c6:	bc08      	pop	{r3}
 80007c8:	469e      	mov	lr, r3
 80007ca:	4770      	bx	lr

080007cc <_fini>:
 80007cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ce:	bf00      	nop
 80007d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007d2:	bc08      	pop	{r3}
 80007d4:	469e      	mov	lr, r3
 80007d6:	4770      	bx	lr
